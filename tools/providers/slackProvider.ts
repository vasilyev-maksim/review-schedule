// tslint:disable:no-console

import axios from 'axios';

import { Provider } from '../../src/enums';
import { IMember } from '../../src/models';
import { isSubstring } from '../utils';
import { IProvider } from './models';

const token = 'xoxp-330924193331-522722404979-524993675889-1ba121bc802eb43e9f60f62724ffa6bd';
const url = `https://slack.com/api/users.list?token=${token}&pretty=1`;

class SlackProvider implements IProvider<ISlackUser> {
    public getUserName (user: ISlackUser): string {
        return user.profile && user.profile.real_name_normalized;
    }

    public getProviderName (): Provider {
        return Provider.Slack;
    }

    public findUserByName (query: string, users: ISlackUser[]): ISlackUser | null {
        return users.find((user) => {
            return [
                user.name,
                user.real_name,
                user.profile.first_name,
                user.profile.last_name,
                user.profile.real_name,
                user.profile.real_name_normalized,
                user.profile.display_name,
                user.profile.display_name_normalized,
            ].some((name) => isSubstring(name, query));
        }) || null;
    }

    public async getAllUsers (): Promise<ISlackUser[]> {
        const response = (await axios.get<IResponse>(url)).data;

        if (response.ok) {
            return response.members.filter((user) => !user.is_bot);
        } else {
            if (response.error === 'token_revoked') {
                throw Error(
                    'Slack token rn evoked: Vasilyev Maksim\'s token was revoked because he has'
                    + ' new account in Slack or his token somehow expired or he has even been fired :('
                    + ' Please use this link'
                    + '\n\nhttps://api.slack.com/custom-integrations/legacy-tokens#legacy-info\n\n'
                    + 'to generate new token and replace the old one with it.'
                );
            } else {
                throw Error(`Unknown error from Slack API: ${response.error}`);
            }
        }
    }

    public convertToMember (user: ISlackUser): Partial<IMember> {
        const [name, surname] = user.profile.real_name.split(' ');
        const member: Partial<IMember> = {
            name,
            photo: user.profile.image_48,
            slackId: user.id,
            surname,
        };
        return member;
    }
}

export const slackProvider = new SlackProvider();

/**
 * Following interfaces were generated by the extension for VS Code:
 * https://marketplace.visualstudio.com/items?itemName=mariusalchimavicius.json-to-ts
 */

interface IResponse {
    ok: boolean;
    members: ISlackUser[];
    cache_ts: number;
    error: string;
}

interface ISlackUser {
    id: string;
    team_id: string;
    name: string;
    deleted: boolean;
    profile: IProfile;
    is_bot: boolean;
    is_app_user: boolean;
    updated: number;
    color?: string;
    real_name?: string;
    tz?: string;
    tz_label?: string;
    tz_offset?: number;
    is_admin?: boolean;
    is_owner?: boolean;
    is_primary_owner?: boolean;
    is_restricted?: boolean;
    is_ultra_restricted?: boolean;
    has_2fa?: boolean;
}

interface IProfile {
    title: string;
    phone: string;
    skype: string;
    real_name: string;
    real_name_normalized: string;
    display_name: string;
    display_name_normalized: string;
    status_text: string;
    status_emoji: string;
    status_expiration: number;
    avatar_hash: string;
    email?: string;
    image_24: string;
    image_32: string;
    image_48: string;
    image_72: string;
    image_192: string;
    image_512: string;
    status_text_canonical: string;
    team: string;
    image_original?: string;
    first_name?: string;
    last_name?: string;
    image_1024?: string;
    is_custom_image?: boolean;
    bot_id?: string;
    api_app_id?: string;
    always_active?: boolean;
    fields?: any;
}
